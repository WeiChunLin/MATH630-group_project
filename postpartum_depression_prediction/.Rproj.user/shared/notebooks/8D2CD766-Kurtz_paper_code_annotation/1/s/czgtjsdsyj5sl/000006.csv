"0","####"
"0","## Step 0.E: Average the normalized %viability across replicates  --------------------------------------------------------"
"0","# Create df"
"0","All_nested_v1 <- All_data_v3 %>% group_by(Specimen_ID,Drug,Dose) %>% tidyr::nest()"
"0","# Checks"
"0","dim(All_nested_v1) # 58926 rows (122*69*7 = 58,926) by 4 columns (list-column = 'data')"
"1","[1]"
"1"," 58926"
"1","     4"
"1","
"
"0","dim(All_nested_v1$data[[1]])  # 2 by 8 so there ARE replicates (ie, 2 platings) for this grouping"
"1","[1]"
"1"," 2"
"1"," 8"
"1","
"
"0","dim(All_nested_v1$data[[58926]])  # 1 by 8 so there are NO replicates for this sample/drug/dose grouping"
"1","[1]"
"1"," 1"
"1"," 8"
"1","
"
"0","# FUNCTION I to make sure 'Replicant' column is correct in database export "
"0","Row_per_grouping <- function(df) {"
"0","  nrow(df)  # nrows should be 1 or 2 "
"0","}"
"0","# FUNCTION II to make sure 'Replicant' column is correct in database export"
"0","Rep_values <- function(df) {"
"0","  df %>% select(Replicant) %>% n_distinct"
"0","}"
"0","# Create df "
"0","# purpose: make sure every sample/drug/dose grouping has Replicant values of 1 or 2 that are correctly coded "
"0","All_nested_v2 <- All_nested_v1 %>% mutate(num_platings = map_dbl(.x=data, .f=Row_per_grouping),"
"0","                                          num_reps = map_dbl(.x=data, .f=Rep_values),"
"0","                                          check_reps = ifelse(num_platings == num_reps, 1, 0))"
"0","# Checks "
"0","dim(All_nested_v2)  # 58926 by 7 (3 new)"
"1","[1]"
"1"," 58926"
"1","     7"
"1","
"
"0","All_nested_v2 %>% count(num_platings)"
